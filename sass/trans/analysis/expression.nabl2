module analysis/expression

imports
  src-gen/signatures/Expression-sig
  analysis/sass
  nabl2/api

/*
 * Math
 */
rules
  [[ BinExp(Add(), lhs, rhs) ^ (s, css) : eTy ]] :=
    [[ lhs ^ (s, _) : lTy ]], [[ rhs ^ (s, _) : rTy ]],
    eTy is typeForAddition of (lTy, rTy) | error $[Types [lTy] and [rTy] are not addable.],
    css == CSSAble().
  
  [[ BinExp(Sub(), lhs, rhs) ^ (s, css) : eTy ]] :=
    [[ lhs ^ (s, _) : lTy ]], [[ rhs ^ (s, _) : rTy ]],
    eTy is typeForSubtraction of (lTy, rTy) | error $[Types [lTy] and [rTy] are not subtractable.],
    css == CSSAble().
  
  [[ BinExp(Mul(), lhs, rhs) ^ (s, css) : eTy ]] :=
    [[ lhs ^ (s, _) : lTy ]], [[ rhs ^ (s, _) : rTy ]],
    eTy is typeForMultiplication of (lTy, rTy) | error $[Types [lTy] and [rTy] are not multiplicable.],
    css == CSSAble().

  [[ BinExp(Div(), lhs, rhs) ^ (s, css) : eTy ]] :=
    [[ lhs ^ (s, _) : lTy ]], [[ rhs ^ (s, _) : rTy ]],
    eTy is typeForDivision of (lTy, rTy) | error $[Types [lTy] and [rTy] are not divisible],
    css == CSSAble().
  
  [[ BinExp(Mod(), lhs, rhs) ^ (s, css) : eTy ]] :=
    [[ lhs ^ (s, _) : lTy ]], [[ rhs ^ (s, _) : rTy ]],
    eTy is typeForModulo of (lTy, rTy) | error $[Types [lTy] and [rTy] are not modulable],
    css == CSSAble(). 

/*
 * Logic 
 */
rules
  [[ BinExp(And(), lhs, rhs) ^ (s, css) : BoolT() ]] :=
    [[ lhs ^ (s, _) : lTy ]], [[ rhs ^ (s, _) : rTy ]],
    lTy <coerce? BoolT(),
    rTy <coerce? BoolT(),
    css == CSSAble().
  [[ BinExp(Or(), lhs, rhs) ^ (s, css) : BoolT() ]] :=
    [[ lhs ^ (s, _) : lTy ]], [[ rhs ^ (s, _) : rTy ]],
    lTy <coerce? BoolT(),
    rTy <coerce? BoolT(),
    css == CSSAble().
  [[ UnExp(Not(), e) ^ (s, css) : BoolT() ]] := 
    [[ e ^ (s, _) : ty ]],
    ty <coerce? BoolT(),
    css == CSSAble().
  
/*
 * Comparison
 */
rules
  [[ BinExp(Eq(), lhs, rhs) ^ (s, css) : BoolT() ]] :=
    [[ lhs ^ (s, _) : t ]], [[ rhs ^ (s, _) : t ]],
    css == CSSAble(). // TODO: Fix, can also happen for int and float
  [[ BinExp(Gt(), lhs, rhs) ^ (s, css) : BoolT() ]] :=
    [[ lhs ^ (s, _) : lTy ]], [[ rhs ^ (s, _) : rTy ]],
    lTy <coerce? FloatT(),
    rTy <coerce? FloatT(),
    css == CSSAble().
  
  
  