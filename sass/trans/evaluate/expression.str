module evaluate/expression

imports
  nabl2/api
  nabl2shared

imports
  evaluate/evaluate
  evaluate/number
  src-gen/signatures/Expression-sig
  src-gen/signatures/String-sig
  desugar/expression/-
  analysis/sass
  
  evaluate/common
  evaluate/interpret/interpret

signature
  constructors
    LengthT : Type * string -> Type

strategies
  evaluate-exp(|store) = bottomup(try(evaluate-e(|store)))


/**
 * 
 */
strategies
  truthy = not(?False() <+ ?Null())

/**
 * Variable lookup
 */  
rules
  evaluate-e(|store): VarRef(x) -> e with
    e := <get-var(|store)> x


/** 
 * Logic
 */
rules
  evaluate-e(|store): UnExp(Not(), e) -> <truthy < !False() + !True()> e

  evaluate-e(|store): BinExp(And(), lhs, rhs) -> True() where <truthy> lhs; <truthy> rhs
  evaluate-e(|store): BinExp(And(), lhs, rhs) -> False()
  
  evaluate-e(|store): BinExp(Or(), lhs, rhs) -> False() where
    <not(truthy)> lhs; <not(truthy)> rhs
  evaluate-e(|store): BinExp(Or(), lhs, rhs) -> True()


/**
 * Comparison
 */
rules
  eq-term = try(extr-f); eq

  evaluate-e(|store): BinExp(Eq(), lhs, rhs) ->
    <eq-term < !True() + !False()> <strip-annos> (lhs, rhs)
  evaluate-e(|store): BinExp(Gt(), lhs, rhs) ->  
    <extr-f; gtr < !True() + !False()> (lhs, rhs) 

/**
 * Arithmetic operations
 */
strategies
  apply-bin(|f) = extr; call(f||); try(intl-float)
  extr = try(extract)

  extract: (l, r) -> (<extr> l, <extr> r)
  extract: Length(n, _) -> <extr> n
  extract: Int(f) -> <string-to-int> f
  extract: Float(f) -> <string-to-real> f
  extract: String(s, _) -> s
  extract: Hex(r, g, b) -> (<hex-string-to-int> r, <hex-string-to-int> g, <hex-string-to-int> b)
  
  extr-f: (l, r) -> (<extr-f> l, <extr-f> r)
  extr-f: f@Float(_) -> <extr> f
  extr-f: Int(f) -> <string-to-real> f
  extr-f: Length(v, _) -> <try(extr-f)> v

/**
 * AST node op to Stratego function.
 */
strategies
  op-to-f: (Add(), IntT(), IntT())  -> "addi"
  op-to-f: (Add(), FloatT(), _)     -> "addr"
  op-to-f: (Add(), _, FloatT())     -> "addr"
  op-to-f: (Add(), StringT(), StringT()) -> "conc-strings"
  
  op-to-f: (Sub(), IntT(), IntT())  -> "subti"
  op-to-f: (Sub(), FloatT(), _)     -> "subtr"
  op-to-f: (Sub(), _, FloatT())     -> "subtr"
  
  op-to-f: (Mul(), IntT(), IntT())  -> "muli"
  op-to-f: (Mul(), FloatT(), _)     -> "mulr"
  op-to-f: (Mul(), _, FloatT())     -> "mulr"
  
  op-to-f: (Div(), _, _)            -> "divr"
  op-to-f: (Mod(), IntT(), IntT())  -> "modi"
  op-to-f: (Mod(), FloatT(), _)     -> "modr"
  op-to-f: (Mod(), _, FloatT())     -> "modr"
  
  op-to-f: (Add(), ColourT(), ColourT()) -> "add-triple-hex"
  op-to-f: (Sub(), ColourT(), ColourT()) -> "sub-triple-hex"
  op-to-f: (Mul(), ColourT(), IntT()) -> "mul-triple-hex"
  op-to-f: (Mul(), IntT(), ColourT()) -> "mul-triple-hex"
  op-to-f: (Mod(), ColourT(), IntT()) -> "mod-triple-hex"
  
  op-hex(op): (l, r) -> <max> (0, <min> (255, <op> (l, r)))
  add-triple-hex: ((lr, lg, lb), (rr, rg, rb)) -> (<op-hex(addi)>  (lr, rr), <op-hex(addi)>  (lg, rg), <op-hex(addi)>  (lb, rb))
  sub-triple-hex: ((lr, lg, lb), (rr, rg, rb)) -> (<op-hex(subti)> (lr, rr), <op-hex(subti)> (lg, rg), <op-hex(subti)> (lb, rb))
  mul-triple-hex: (l, (rr, rg, rb)) -> (<op-hex(muli)>  (l, rr), <op-hex(muli)>  (l, rg), <op-hex(muli)>  (l, rb))
  mul-triple-hex: ((rr, rg, rb), l) -> (<op-hex(muli)>  (l, rr), <op-hex(muli)>  (l, rg), <op-hex(muli)>  (l, rb))
  mod-triple-hex: ((lr, lg, lb), r) -> (<op-hex(modi)>  (lr, r), <op-hex(modi)>  (lg, r), <op-hex(modi)>  (lb, r))
  
/**
 * Strategies to wrap values depending on the given types.
 */
strategies
  wrap-result: (IntT(),   v) -> Int(v)
  wrap-result: (FloatT(), v) -> Float(v)
  wrap-result: (LengthT(eT, u), v) -> Length(<wrap-result> (eT, v), u)
  wrap-result: (StringT(), v) -> String(v, DoubleQuote())
  wrap-result: (ColourT(), (r, g, b)) -> Hex(<int-to-hex-string> r, <int-to-hex-string> g, <int-to-hex-string> b)
  
  extr-math-type: LengthT(e, _) -> <try(extr-math-type)> e  
  extr-comp-v:    Length(e, _)  -> <try(extr-comp-v)> e

/**
 * Constructing the expression types.
 */
strategies
  exp-t: Int(_) -> IntT()
  exp-t: Float(_) -> FloatT()
  exp-t: Length(n, u) -> LengthT(<exp-t> n, u)
  exp-t: String(_, _) -> StringT()
  exp-t: Hex(_, _, _) -> ColourT()
  
  unit-eq = strip-annos; eq
  
  construct-end-type = construct-exp-type
  construct-exp-type: (Add(), IntT(), IntT())     -> IntT()
  construct-exp-type: (Add(), FloatT(), FloatT()) -> FloatT()
  construct-exp-type: (Add(), IntT(), FloatT())   -> FloatT()
  construct-exp-type: (Add(), FloatT(), IntT())   -> FloatT()
  construct-exp-type: (Add(), StringT(), _)       -> StringT()
  construct-exp-type: (Add(), _, StringT())       -> StringT()
  construct-exp-type: (Add(), ColourT(), ColourT()) -> ColourT()
  construct-exp-type: (Add(), LengthT(lnt, lu), LengthT(rnt, ru))
    -> LengthT(<construct-end-type> (Add(), lnt, rnt), lu)
    where <unit-eq> (lu, ru)

  construct-exp-type: (Sub(), IntT(), IntT())     -> IntT()
  construct-exp-type: (Sub(), FloatT(), IntT())   -> FloatT()
  construct-exp-type: (Sub(), IntT(), FloatT())   -> FloatT()
  construct-exp-type: (Sub(), FloatT(), FloatT()) -> FloatT()
  construct-exp-type: (Sub(), ColourT(), ColourT()) -> ColourT()
  construct-exp-type: (Sub(), LengthT(lnt, lu), LengthT(rnt, ru))
    -> LengthT(<construct-end-type> (Sub(), lnt, rnt), lu)
    where <unit-eq> (lu, ru)
    
  construct-exp-type: (Mul(), IntT(), IntT())     -> IntT()
  construct-exp-type: (Mul(), FloatT(), IntT()) -> FloatT()
  construct-exp-type: (Mul(), IntT(), FloatT()) -> FloatT()
  construct-exp-type: (Mul(), FloatT(), FloatT()) -> FloatT()
  construct-exp-type: (Mul(), IntT(), ColourT()) -> ColourT()
  construct-exp-type: (Mul(), ColourT(), IntT()) -> ColourT()
  construct-exp-type: (Mul(), l, LengthT(rnt, ru))
    -> LengthT(<construct-end-type> (Mul(), l, rnt), ru)
  construct-exp-type: (Mul(), LengthT(lnt, lu), r)
    -> LengthT(<construct-end-type> (Mul(), lnt, r), lu)
  
  construct-exp-type: (Div(), IntT(), IntT())     -> FloatT()
  construct-exp-type: (Div(), FloatT(), IntT())   -> FloatT()
  construct-exp-type: (Div(), IntT(), FloatT())   -> FloatT()
  construct-exp-type: (Div(), FloatT(), FloatT()) -> FloatT()
  construct-exp-type: (Div(), LengthT(lnt, lu), LengthT(rnt, ru))
    -> <construct-exp-type> (Div(), lnt, rnt)
    where <unit-eq> (lu, ru)
  construct-exp-type: (Div(), LengthT(lnt, u), r)
    -> LengthT(<construct-end-type> (Div(), lnt, r), u)
  
  construct-exp-type: (Mod(), IntT(), IntT())     -> IntT()
  construct-exp-type: (Mod(), FloatT(), IntT())   -> FloatT()
  construct-exp-type: (Mod(), IntT(), FloatT())   -> FloatT()
  construct-exp-type: (Mod(), FloatT(), FloatT()) -> FloatT()
  construct-exp-type: (Mod(), ColourT(), IntT()) -> ColourT()
  construct-exp-type: (Mod(), LengthT(lnt, lu), r)
    -> LengthT(<construct-end-type> (Mod(), lnt, r), lu)
  
  equalize-args: (Int(lhs), Float(rhs)) -> (Float(lhs), Float(rhs))
  equalize-args: (Float(lhs), Int(rhs)) -> (Float(lhs), Float(rhs))
     
rules
  evaluate-e(|store): BinExp(op, lhs, rhs) -> v with
    lT := <exp-t> lhs
    ; rT := <exp-t> rhs
    
    ; lCV := <try(extr-comp-v)> lhs
    ; rCV := <try(extr-comp-v)> rhs
    
    ; lCT := <try(extr-math-type)> lT
    ; rCT := <try(extr-math-type)> rT
    ; f := <op-to-f> (op, lCT, rCT)
     
    ; wrapT := <construct-end-type> (op, lT, rT)
       
    ; (lV, rV) := <try(equalize-args)> (lCV, rCV)
    ; numV := <apply-bin(|f)> (lV, rV)
    ; v := <wrap-result> (wrapT, numV)
