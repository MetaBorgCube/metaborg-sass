module interpret/declaration

imports
  src-gen/signatures/Declaration-sig
  desugar/declaration

imports
  evaluate/interpret/interpret
  evaluate/expression

signature
  constructors
          //name    * args * default  * body * env
    Mixin : String  * list * list     * list * list -> ScriptItem


/**
 * `interp-item(|store) -> (interpreted item, global store, local store)`
 *
 * Interprets a script item
 *
 * Arguments:
 *  Terms:
 *    - store: A store containing the relevant values, (vars, mixins, etc....)
 *
 * Returns:
 *  A triplet: 
 *    + The interpreted item
 *    + A store representing the items to add to the global store of the next item.
 *        Note: the global store is a subset of the local store.
 *    + A store representing the items to add to the local store of the next item.
 */
rules
  interp-item(|store): VarDeclaration(l, exp)
    -> ([VarDeclaration(l, v)], globalStore, localStore)
  with
    v := <evaluate-exp(|store)> exp
    ; globalStore := <create-store> ()
    ; localStore := <create-store-with-var> (l, v)
  
  interp-item(|store): GlobalVarDeclaration(l, exp)
    -> ([GlobalVarDeclaration(l, v)], globalStore, globalStore)
  with
    v := <evaluate-exp(|store)> exp
    ; globalStore := <create-store-with-var> (l, v)
  
  interp-item(|store): BlockDeclaration(selec, decls)
    -> ([BlockDeclaration(selec, d)], globalVars, globalVars)
  with
    (d, globalVars, _) := <interpret-items(|store)> decls
  
  interp-item(|store): PropertyDeclaration(p, exp)
    -> ([PropertyDeclaration(p, e)], emptyStore, emptyStore)
  with
    e := <evaluate-exp(|store)> exp
    ; emptyStore := <create-store> ()

  interp-item(|store): MixinDeclaration(l, args, argsDefaults, body)
    -> ([MixinDeclaration(l, args, argsDef, body)], emptyStore, localStore)
  with
    // Evaluate the default argument expressions.
    argsDef := <map(\FArg(i, FArgDefault(n, e))
                  -> FArg(i, FArgDefault(n, <evaluate-exp(|store)> e))\)> argsDefaults
    ; emptyStore := <create-store> ()
    ; localStore := <create-store-with-mixin> (l, Mixin(l, args, argsDef, body, store))
